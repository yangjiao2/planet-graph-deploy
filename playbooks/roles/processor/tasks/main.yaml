---   
  - 
    name: "include task messenger"
    include: messager.yaml

  - 
    name: "register messenger"
    register: messager
    shell: k get po | grep rabbitmq-messenger | awk '{print "k logs " $1 " -c init-server-load-data  | tail -n 2 "}'  | sh
  - 
    debug: 
      msg: "messenger content: {{ messager }}"
    name: "DEBUG info"
    tags: debug   
  - 
    name: "register job replica"
    register: job_replica
    shell: ls {{ base_data_dir }}/input/ | wc -l
  - 
    debug: 
      msg: "file server content: {{ job_replica.stdout }}"
    name: "DEBUG info"
    tags: debug
  - 
    name: "set job replica"
    set_fact:
      job_replicas: "{{ job_replica.stdout }}"
      cacheable: true
  - 
    name: "register file server ip"
    register: file_server_content_cluster_ip
    shell: k get svc -n {{ k8s_ns }} | grep {{ fileserver_hostname }}  |  awk '{print $3 }'

  - 
    name: "set fileserver server cluster ip"
    set_fact: 
      fileserver: "{{ file_server_content_cluster_ip.stdout }}"
      cacheable: true
  - 
    debug: 
      msg: "created with job_replica = {{ job_replica.stdout }}"
    name: "DEBUG info"
  - 
    name: copy template on job
    template:
      src: "{{ role_path }}/templates/job.j2"
      dest: "{{ role_path }}/files/job.yaml"
      mode: '0644'
  - 
    name: trigger job
    k8s:
      state: present
      definition: "{{ lookup('file', '{{ role_path }}/files/job.yaml')  }}"
  - 
    name: "k8s: wait for job status become succeeded"
    shell: "k get job planet-graph-processor -o jsonpath='{.status.succeeded}'"
    register: job_status
    until: job_status.stdout == "1"
    retries: 2
    delay: 10
    ignore_errors: yes
  - 
    name: 'DEBUG'
    debug:
      msg: "{{ job_status }}"

  - 
    k8s: 
      api_version: v1
      definition: 
        kind: Pod
        metadata: 
          labels: 
            app: planet-graph-service
          name: planet-graph-service-pod
          namespace: "{{ k8s_ns }}"
        spec: 
          containers: 
            -       
              command: 
                - /bin/bash
                - "-c"
              args:
                - >- 
                  echo [DEBUG] input:  $( ls {{ fileserver_mount_path}}/input/ );
                  echo [DEBUG] result:  $( ls {{ fileserver_mount_path}}/result/ );
              image: "{{ ubuntu_image_full_name }}"
              name: planet-graph-service-pod-container
              volumeMounts: 
                - 
                  mountPath: "{{ fileserver_mount_path }}"
                  name: data
            # -       
              # command: 
              #   - matrix_dbscan.py
              #   - echo $({{ fileserver_mount_path }} | grep .txt | head -n 1 )
              #   - /bin/bash
              #   - "-c"
              # command: 
              #   - /bin/bash
              #   - "-c"
              # args:
                # - >- 
                #   file=$( ls {{ fileserver_mount_path}}/input/ | head -n 1 );
                #   echo  processing $file;
                #   python matrix_dbscan.py  {{ fileserver_mount_path }}/input/$file;
                # - echo $( ls {{ fileserver_mount_path}}/ );
                # - -v
                # - "{{ fileserver_mount_path }}:{{ fileserver_mount_path }}"

              # args:
              #   - 
              #     "while true; do sleep 30; done; "
              # image: "{{ processor_image_full_name }}"
              # name: planet-graph-processor-pod-container
              # volumeMounts: 
              #   - 
              #     mountPath: "{{ fileserver_mount_path }}"
              #     name: data
          # initContainers: 
          #   - 
          #     args: 
          #       - -c
          #       - >-
          #         rabbit_msg=$(python3 /script/receiver.py | sed -n 1p);
          #         export DOCKER_FILE_INPUT_PATH=$rabbit_msg;
          #         echo 'input='$DOCKER_FILE_INPUT_PATH;
          #         mkdir -p {{ fileserver_mount_path }}/input/;
          #         mkdir -p {{ fileserver_mount_path }}/result/;
          #         echo wget -O {{ fileserver_mount_path }}/input/${DOCKER_FILE_INPUT_PATH}  {{ fileserver_hostname }}:{{ file_port }}/{{ input_data_path }}/input/${DOCKER_FILE_INPUT_PATH} --no-host-directories  >  {{ fileserver_mount_path }}/wget.sh;
          #         sleep 10;
          #         sh {{ fileserver_mount_path }}/wget.sh;
          #         rm -rf {{ fileserver_mount_path }}/wget.sh;
          #         cp {{ fileserver_mount_path}}/input/${DOCKER_FILE_INPUT_PATH} {{ fileserver_mount_path}}/input/input.txt;
                # - "wget -O \"{{ fileserver_mount_path}}/$DOCKER_FILE_INPUT_PATH  {{ fileserver_hostname }}:{{ file_port }}/{{ input_data_path }}/input/$DOCKER_FILE_INPUT_PATH ;\""
              # command: 
              #   - /bin/bash
              # image: "{{ cluster_message_center_image_full_name }}"
              # name: init-server-load-data
              # resources: 
              #   limits: 
              #     cpu: "{{ resources.service.cpu.lim}}"
              #     memory: "{{ resources.service.mem.lim}}"
              #   requests: 
              #     cpu: "{{ resources.service.cpu.req}}"
              #     memory: "{{ resources.service.mem.req}}"
              # volumeMounts: 
              #   - 
              #     mountPath: "{{ fileserver_mount_path }}"
              #     name: data
          volumes: 
            - 
              name: data
              persistentVolumeClaim: 
                claimName: "{{ planet_graph_volume_claim }}"
    name: "k8s: create planet graph processor pod"

  # - 
  #     name: "get processor configmap "
  #     register: processor_configmap
  #     shell: "k get cm -n {{ k8s_ns }} | grep dataconfig | awk '{print $1}'"
    # - 
    #   name: "k8s: clean up configmap"
    #   shell: "k delete cm {{ processor_configmap.stdout }} -n {{ k8s_ns }}"
    #   when: "processor_configmap.stdout != '' "
    # -    
    #   name: "get processor messager "
    #   register: processor_messenger
    #   shell: "k get sts -n {{ k8s_ns }} | grep rabbitmq-messenger  | awk '{print $1}'"
    # - 
    #   name: 'clean up messager'
    #   shell: "k delete sts {{ processor_messenger.stdout }} -n {{ k8s_ns }}"
    #   when: "processor_messenger.stdout != '' "


    # - name: clean up job resource
    #   k8s:
    #     state: absent
    #     definition: "{{ lookup('file', '{{ role_path }}/files/job.yaml')  }}"
    #   tags: cleanup
  
    # k delete deployment rabbitmq